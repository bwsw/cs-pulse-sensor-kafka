#!/usr/bin/python
# -*- coding: UTF-8 -*-


import sys
import datetime
import re
import libvirt
import json
import os
import traceback
from datetime import datetime
from kafka import KafkaProducer
from kafka.errors import KafkaError
from xml.etree import ElementTree

MB = 1024 * 1024
GB = 1024 * MB
SEC = 1000000000.


csHost = os.environ["KVM_HOST"]
kafkaBootstrapHosts = os.environ["KAFKA_BOOTSTRAP"]
kafkaTopic = os.environ["KAFKA_TOPIC"]
gatherHostStats = os.environ["GATHER_HOST_STATS"]
debug=os.environ["DEBUG"]

producer = KafkaProducer(bootstrap_servers = kafkaBootstrapHosts.split(","),
                         value_serializer = lambda m: json.dumps(m).encode('ascii'),
                         retries = 5)

try:
	conn = libvirt.open(csHost)
	if conn == None:
		raise Exception("Failed to open connection to %s" % (csHost,))
		exit(1)
	
	
	domainIDs = conn.listDomainsID()
	if domainIDs == None:
		raise Exception('Failed to get a list of domain IDs')
		
	for domainID in domainIDs:
		current_time = datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')

		domain = conn.lookupByID(domainID)
		#print [method for method in dir(domain) if callable(getattr(domain, method))]
		#continue

		tree = ElementTree.fromstring(domain.XMLDesc())
		vmHost = {}
		vmHost["host"] = csHost
		vmHost["name"] = domain.name()
		vmHost["uuid"] = domain.UUIDString()
		state, maxmem, mem, cpus, cput = domain.info()
		vmHost["maxmem"] = maxmem
		vmHost["mem"] = mem
		vmHost["cpus"] = cpus
		vmHost["cputime"] = str(cput / SEC)
		vmHost["isrunning"] = domain.isActive()
		vmHost["rss"] = long(domain.memoryStats()["rss"])
		
		vmHost["networkStatistics"] = {}
		netDevs = tree.findall('devices/interface')
		for intf in netDevs:
			dev = intf.find('target').get('dev')
			addr = intf.find('mac').get('address')
			stats = domain.interfaceStats(dev)
			vmHost["networkStatistics"][addr] = {
				"readBytes": 	long(stats[0]),
				"readPackets": 	long(stats[1]),
				"readErrors": 	long(stats[2]),
				"readDrops": 	long(stats[3]),
				"writeBytes": 	long(stats[4]),
				"writePackets": long(stats[5]),
				"writeErrors": 	long(stats[6]),
				"writeDrops": 	long(stats[7])}

		vmHost["diskStatistics"] = {}
		blockDevs = tree.findall('devices/disk')
		for disk in blockDevs:
			if disk.get('device') <> 'disk':
				continue

			dev = disk.find('target').get('dev')
			stats = domain.blockStats(dev)

			totalSpace, allocatedSpace, onDiskSpace = domain.blockInfo(dev)
			#print info[0] / 1024 / 1024 / 1024, info[1] / 1024 / 1024 / 1024, info[2] / 1024 / 1024 / 1024

			source = None
			if disk.get('type') == 'file':
				source = disk.find('source').get('file')
				source = "file://%s" % (source,)
			elif disk.get('type') == 'block':
				source = disk.find('source').get('dev')
				source = "block://%s" % (source,)
			elif disk.get('type') == 'network' and disk.find('source').get('protocol') == 'rbd':
				source = disk.find('source').get('name')
				source = "rbd://%s" % (source,)
			else:
				raise Exception("Undefined or Unknown device type for VM: %s." % (vmHost["name"],))


			if source is not None:
				vmHost["diskStatistics"][source] = {
					"readIOPS" :  long(stats[0]),
					"readBytes":  long(stats[1]),
					"writeIOPS":  long(stats[2]),
					"writeBytes": long(stats[3]),
					"ioErrors":   long(stats[4]),
					"totalSpace": int(totalSpace / GB),
					"allocatedSpace": int(allocatedSpace / GB),
					"onDiskSpace": int(onDiskSpace / GB) }
		
		tags = {
			"vmId": vmHost["name"],
			"vmUuid": vmHost["uuid"],
			"vmHost": vmHost["host"],
		}
		query = [
			{
				"measurement": "cpuTime",
				"time": current_time,
				"tags": tags,
				"fields": {
					"cpuTime": float(vmHost["cputime"]),
					"cpus": int(vmHost["cpus"])
				}
			},
			{
				"measurement": "rss",
				"time": current_time,
				"tags": tags,
				"fields": {
					"rss": long(vmHost["rss"]),
					"mem": long(vmHost["mem"]),
					"maxmem": long(vmHost["maxmem"])
				}
			},
		]
		
		for key in vmHost["networkStatistics"].keys():
			netTags = tags.copy()
			netTags["mac"] = key
				
			query.append({
				"measurement": "networkInterface",
				"time": current_time,
				"tags": netTags,
				"fields": vmHost["networkStatistics"][key]
			})
		
		for path in vmHost["diskStatistics"].keys():
			parts = path.split('/')
			diskTags = tags.copy()
			diskTags["image"] = parts[-1]
			diskTags["pool"] = parts[-2]
			query.append({
				"measurement": "disk",
				"time": current_time,
				"tags": diskTags,
				"fields": vmHost["diskStatistics"][path]
			})

		producer.send(kafkaTopic, query)

		if debug == 'true':
			print json.dumps(query, sort_keys=True, indent=4, separators=(',', ': '))
			print "\n"

	if gatherHostStats == 'true':
		current_time = datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')
		query = []
		stats = conn.getCPUStats(libvirt.VIR_NODE_CPU_STATS_ALL_CPUS)
		nodeinfo = conn.getInfo()
		mem = conn.getFreeMemory()
		query.append({
			"measurement": "nodeInfo",
			"time": current_time,
			"tags": { 'vmHost': csHost },
			"fields": {
				'kernel': long(stats['kernel']  / SEC),
				'idle': long(stats['idle'] / SEC),
				'user': long(stats['user'] / SEC),
				'iowait': long(stats['iowait'] / SEC),
				'totalMem': nodeinfo[1],
				'freeMem': long(mem / MB)
			}
		})

		producer.send(kafkaTopic, query)

		if debug == 'true':
			print json.dumps(query, sort_keys=True, indent=4, separators=(',', ': '))
			print "\n"

		

	producer.flush()

	conn.close()

except Exception as e:
        traceback.print_exc(file=sys.stderr)
        
